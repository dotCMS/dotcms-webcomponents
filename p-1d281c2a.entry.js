import{r as registerInstance,h,H as Host,g as getElement}from"./p-ca5d1561.js";import{f as fallbackErrorMessages,D as DotUploadService}from"./p-06d911ac.js";import{g as getOriginalStatus,u as updateStatus,a as getClassNames}from"./p-3163a9f0.js";import{a as getErrorMessage,b as getFieldsFromLayout,f as fieldCustomProcess}from"./p-aff2a700.js";const dotFormCss="dot-form{display:block}dot-form>form label{margin:0;padding:0}dot-form>form dot-form-column>*{display:block;margin:2rem 0}dot-form>form dot-form-column>*:first-child{margin-top:0}dot-form>form dot-form-column>*:last-child{margin-bottom:0}dot-form>form .dot-form__buttons{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:end;justify-content:flex-end}dot-form>form .dot-form__buttons button:last-child{margin-left:1rem}",SUBMIT_FORM_API_URL="/api/v1/workflow/actions/default/fire/NEW",DotFormComponent=class{constructor(t){registerInstance(this,t),this.resetLabel="Reset",this.submitLabel="Submit",this.layout=[],this.variable="",this.status=getOriginalStatus(),this.errorMessage="",this.uploadFileInProgress=!1,this.fieldsStatus={},this.value={}}onValueChange(t){const{tagName:s}=t.target,{name:e,value:o}=t.detail,a=fieldCustomProcess[s];"DOT-BINARY-FILE"===s&&o?this.uploadFile(t).then(t=>{this.value[e]=t&&t.id}):this.value[e]=a?a(o):o}onStatusChange({detail:t}){this.fieldsStatus[t.name]=t.status,this.status=updateStatus(this.status,{dotTouched:this.getTouched(),dotPristine:this.getStatusValueByName("dotPristine"),dotValid:this.getStatusValueByName("dotValid")})}layoutWatch(){this.value=this.getUpdateValue()}fieldsToShowWatch(){this.value=this.getUpdateValue()}componentWillLoad(){this.value=this.getUpdateValue()}render(){const t=getClassNames(this.status,this.status.dotValid);return h(Host,{class:Object.assign({},t)},h("form",{onSubmit:this.handleSubmit.bind(this)},this.layout.map(t=>h("dot-form-row",{row:t,"fields-to-show":this.fieldsToShow})),h("div",{class:"dot-form__buttons"},h("button",{type:"reset",onClick:()=>this.resetForm()},this.resetLabel),h("button",{type:"submit",disabled:!this.status.dotValid||this.uploadFileInProgress},this.submitLabel))),h("dot-error-message",null,this.errorMessage))}getStatusValueByName(t){return Object.values(this.fieldsStatus).map(s=>s[t]).every(t=>!0===t)}getTouched(){return Object.values(this.fieldsStatus).map(t=>t.dotTouched).includes(!0)}handleSubmit(t){t.preventDefault(),fetch(SUBMIT_FORM_API_URL,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({contentlet:Object.assign({contentType:this.variable},this.value)})}).then(async t=>{if(200!==t.status)throw{message:await t.text(),status:t.status};return t.json()}).then(t=>{this.runSuccessCallback(t.entity)}).catch(({message:t,status:s})=>{this.errorMessage=getErrorMessage(t)||fallbackErrorMessages[s]})}runSuccessCallback(contentlet){const successCallback=this.getSuccessCallback();if(successCallback)return function(){return eval(successCallback)}.call({contentlet})}getSuccessCallback(){return getFieldsFromLayout(this.layout).filter(t=>"formSuccessCallback"===t.variable)[0].values}resetForm(){Array.from(this.el.querySelectorAll("form dot-form-column > *")).forEach(async t=>{try{await t.reset()}catch(s){console.warn(""+t.tagName,s)}})}getUpdateValue(){return getFieldsFromLayout(this.layout).filter(t=>!1===t.fixed).reduce((t,{variable:s,defaultValue:e,dataType:o,values:a})=>Object.assign(Object.assign({},t),{[s]:e||("TEXT"!==o?a:null)}),{})}getMaxSize(t){const s=[...t.target.attributes].filter(t=>"max-file-length"===t.name)[0];return s&&s.value}uploadFile(t){const s=new DotUploadService,e=t.detail.value,o=this.getMaxSize(t),a=t.target;return!o||e.size<=o?(this.uploadFileInProgress=!0,a.errorMessage="",s.uploadFile(e,o).then(t=>(this.errorMessage="",a.previewImageUrl=t.thumbnailUrl,a.previewImageName=t.fileName,this.uploadFileInProgress=!1,t)).catch(({message:t,status:s})=>(a.clearValue(),this.uploadFileInProgress=!1,a.errorMessage=getErrorMessage(t)||fallbackErrorMessages[s],null))):(a.reset().then(()=>{a.errorMessage=`File size larger than allowed ${o} bytes`}),Promise.resolve(null))}get el(){return getElement(this)}static get watchers(){return{layout:["layoutWatch"],fieldsToShow:["fieldsToShowWatch"]}}};DotFormComponent.style=dotFormCss;export{DotFormComponent as dot_form}