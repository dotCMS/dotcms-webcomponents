const t={500:"500 Internal Server Error",400:"400 Bad Request",401:"401 Unauthorized Error"};class e{constructor(){}uploadFile(t,e){return"string"==typeof t?this.uploadFileByURL(t):this.uploadBinaryFile(t,e)}uploadFileByURL(t){return fetch("/api/v1/temp/byUrl",{method:"POST",headers:{"Content-Type":"application/json",Origin:window.location.hostname},body:JSON.stringify({remoteUrl:t})}).then(async t=>{if(200===t.status)return(await t.json()).tempFiles[0];throw this.errorHandler(await t.json(),t.status)})}uploadBinaryFile(t,e,r){let n="/api/v1/temp";n+=r?"?maxFileLength="+r:"";const o=new FormData;return(Array.isArray(t)?t:[t]).forEach(t=>{o.append("files",t)}),this.dotRequest(n,{method:"POST",headers:{},body:o},e).then(async t=>{if(200===t.status){const e=JSON.parse(t.response).tempFiles;return e.length>1?e:e[0]}throw t}).catch(t=>{throw this.errorHandler(JSON.parse(t.response),t.status)})}dotRequest(t,e,r){return new Promise((n,o)=>{const a=new XMLHttpRequest;a.open(e.method||"get",t);for(let t in e.headers||{})a.setRequestHeader(t,e.headers[t]);a.onload=()=>n(a),a.onerror=o,a.upload&&r&&(a.upload.onprogress=t=>{r(t.loaded/t.total*100)}),a.send(e.body)})}errorHandler(e,r){let n="";try{n=e.message||t[r]}catch(o){n=t[500|r]}return{message:n,status:500|r}}}export{e as D,t as f}